Starting audit...
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:43:44: Must have at least one statement. [EmptyBlock]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:48: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:48:109: Must have at least one statement. [EmptyBlock]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:114:13: 'maxRounds' hides a field. [HiddenField]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:115:13: 'currentRound' hides a field. [HiddenField]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:17:28: Parameter caster should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:17:50: Parameter victim should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:35:35: Parameter overtimeDamage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:43:29: Parameter duration should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:51:42: Parameter abilityToIncapacitate should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:63:32: Parameter totalDamage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:71:34: Parameter instantDamage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:15:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:25:70: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:30:87: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:33:88: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:36:92: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:39:88: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:50:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:56:25: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:69:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:75:88: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:80:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:85:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:90:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:99:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:113:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:120:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:126:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:132:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:138:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:18:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:29:36: '6' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:31:36: '3' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:36:91: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:39:92: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:42:92: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:45:96: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:59:86: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:63:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:76:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:84:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:89:90: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:94:90: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:99:94: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:107:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:113:36: '==' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:118:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:124:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:128:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:132:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:136:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:28:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:35:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:41:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:15:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:16:39: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:16:62: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:17:39: Parameter roundsRemaining should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:22:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:32:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:54:19: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:58:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:59:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:59:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:61:28: '3' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:73:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:77:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:96:22: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:80:33: Parameter move should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:81:28: '||' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:121:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'setAbilityAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'setAbilityAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:121:38: Parameter abilityAffectedBy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:125:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:125:28: Parameter damage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:130:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'fightWon' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'fightWon' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:137:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'hasDied' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'hasDied' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:3: Using the '.*' form of import should be avoided - main.characters.*. [AvoidStarImport]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:5: Using the '.*' form of import should be avoided - java.io.*. [AvoidStarImport]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:109:41: '3' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:123:5: Class 'IOAssistant' looks like designed for extension (can be subclassed), but the method 'writeFinalResults' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'IOAssistant' final or making the method 'writeFinalResults' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 81 errors.
