Starting audit...
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:53:46: Parameter damageWithoutRaceModifier should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:61:25: Parameter name should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:78:27: Parameter damage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:86:27: Parameter caster should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:94:29: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:31: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:32: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:47: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:55: Line is longer than 100 characters (found 127). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:62: Line is longer than 100 characters (found 127). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:94: Line is longer than 100 characters (found 130). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:127:30: Parameter characters should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:142:13: 'maxRounds' hides a field. [HiddenField]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:144:13: 'currentRound' hides a field. [HiddenField]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:150: Line is longer than 100 characters (found 118). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:99:27: Parameter caster should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:107:27: Parameter victim should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:115:25: Parameter name should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:119:29: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:127:46: Parameter damageWithoutRaceModifier should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:139:31: Parameter firstRound should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:16:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:23:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:32:25: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:46:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:54:92: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:59:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:64:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:69: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:69:97: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:95:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:101:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:102:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:102:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:112:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:127:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:135:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:141:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:147:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:153:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:24:86: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:28:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:41:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:43: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:52:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:57:90: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:62:90: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:67:94: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:72: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:77:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:84:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'increaseBackstabCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'increaseBackstabCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:88:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:96:36: '%' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:108:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:116:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:120:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:124:93: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:128: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:128:97: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:153:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:162:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'hasAppliedBackStab' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'hasAppliedBackStab' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:166:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:167:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:167:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:19:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:26:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:33:19: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:38:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:50: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:58:34: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:84:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:95:97: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:98:27: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:99:42: '0.7f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:105:31: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:125: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:133:33: '100.0' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:151:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:157:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:158:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:158:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:16:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:23:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:36:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:44: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:61:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:80:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:86:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:87:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:87:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:97:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:98:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:98:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:112:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:116:23: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:136:22: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:146: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:47:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'isHasMadeAKillThisRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'isHasMadeAKillThisRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:51:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'setHasMadeAKillThisRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'setHasMadeAKillThisRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:51:42: Parameter hasMadeAKillThisRound should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:92:33: Parameter move should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:93:28: '||' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:142:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'setAbilityAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'setAbilityAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:142:38: Parameter abilityAffectedBy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:146:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:177:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:193:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'fightWon' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'fightWon' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:204:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'checkForLevelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'checkForLevelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:221:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'hasDied' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'hasDied' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:3: Using the '.*' form of import should be avoided - main.characters.*. [AvoidStarImport]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:111:41: '3' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:125:5: Class 'IOAssistant' looks like designed for extension (can be subclassed), but the method 'writeFinalResults' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'IOAssistant' final or making the method 'writeFinalResults' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 112 errors.
