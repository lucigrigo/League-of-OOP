Starting audit...
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:32: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:46: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:84: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:112:13: 'maxRounds' hides a field. [HiddenField]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:113:13: 'currentRound' hides a field. [HiddenField]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:14:28: Parameter caster should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:14:50: Parameter victim should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:22:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'getDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'getDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:26:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'setDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'setDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:26:27: Parameter damage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:30:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'getDuration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'getDuration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:34:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'setDuration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'setDuration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:34:29: Parameter duration should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:38:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'isAbilityToIncapacitate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'isAbilityToIncapacitate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:42:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'setAbilityToIncapacitate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'setAbilityToIncapacitate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:42:42: Parameter abilityToIncapacitate should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:46:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'getTotalDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'getTotalDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:50:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'roundPassed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'roundPassed' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:54:5: Class 'OverTimeAbility' looks like designed for extension (can be subclassed), but the method 'setTotalDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OverTimeAbility' final or making the method 'setTotalDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:54:32: Parameter totalDamage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:21:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:22:39: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:22:62: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:23:39: Parameter roundsRemaining should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:27:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:28:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:28:58: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:32:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:33:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:33:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:18:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:25:78: '6' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:25:82: '3' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:29:69: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:30:70: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:31:92: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:31:97: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:35:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:40:83: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:41:83: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:45:66: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:46:43: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:47:76: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:54:70: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:55:47: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:56: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:56:95: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:60:70: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:61:47: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:62: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:62:96: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:65:70: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:66:47: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:67: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:67:96: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:70:70: '+' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:71:47: '*' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:72: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:72:100: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:80:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:85:36: '==' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:90:89: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:95: Line is longer than 100 characters (found 113). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:95:108: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:98: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:98:108: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:101: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:101:108: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:104: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:104:112: '100f' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:28:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:29:39: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:29:62: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:30:39: Parameter roundsRemaining should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:34:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:35:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:35:58: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:39:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:40:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:40:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:18:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getTotalOverTimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getTotalOverTimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:19:39: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:19:62: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:20:39: Parameter roundsRemaining should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:24:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:25:37: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:25:58: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:29:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:30:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:30:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:43:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getColon' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getColon' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:47:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getRow' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getRow' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:51:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:55:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getExperience' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getExperience' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:59:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:63:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:67:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:71:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'isCurrentlyFighting' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'isCurrentlyFighting' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:75:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'isIncapacitated' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'isIncapacitated' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:79:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'applyMove' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'applyMove' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:79:27: Parameter move should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:80:28: '||' should be on a new line. [OperatorWrap]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:100:33: '4' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:114:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getAbilityAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getAbilityAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:118:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'setAbilityAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'setAbilityAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:118:38: Parameter abilityAffectedBy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:122:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:122:28: Parameter damage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:131:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'hasDied' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'hasDied' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:135:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'isDead' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'isDead' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/InputData.java:36:5: Class 'InputData' looks like designed for extension (can be subclassed), but the method 'getCharacters' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputData' final or making the method 'getCharacters' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/InputData.java:40:5: Class 'InputData' looks like designed for extension (can be subclassed), but the method 'getInstructions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputData' final or making the method 'getInstructions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/InputData.java:44:5: Class 'InputData' looks like designed for extension (can be subclassed), but the method 'getNrCharacters' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputData' final or making the method 'getNrCharacters' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/InputData.java:48:5: Class 'InputData' looks like designed for extension (can be subclassed), but the method 'getCurrentRoundMoves' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputData' final or making the method 'getCurrentRoundMoves' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/InputData.java:48:48: Parameter roundNumber should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/InputData.java:52:5: Class 'InputData' looks like designed for extension (can be subclassed), but the method 'getMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputData' final or making the method 'getMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:3: Using the '.*' form of import should be avoided - main.characters.*. [AvoidStarImport]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:5: Using the '.*' form of import should be avoided - java.io.*. [AvoidStarImport]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:109:41: '3' is a magic number. [MagicNumber]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/IOAssistant.java:123:5: Class 'IOAssistant' looks like designed for extension (can be subclassed), but the method 'writeFinalResults' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'IOAssistant' final or making the method 'writeFinalResults' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 120 errors.
