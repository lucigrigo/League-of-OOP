Starting audit...
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:53:46: Parameter damageWithoutRaceModifier should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:61:25: Parameter name should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:78:27: Parameter damage should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:86:27: Parameter caster should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Ability.java:94:29: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:84:30: Parameter characters should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/Game.java:94: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/gameplay/OverTimeAbility.java:135:27: Parameter caster should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/Main.java:16: Line has trailing spaces. [RegexpSingleline]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:16:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:23:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:30:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:31:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:31:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:36:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:42:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'computeInitialDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'computeInitialDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:64:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'computeInitialOvertimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'computeInitialOvertimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:74:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getAttackedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getAttackedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:80:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:112:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:140:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:168:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:197:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'getAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'getAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:203:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:221:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:239:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Knight.java:257:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:34:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:93: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:104: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:110:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:117:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'increaseBackstabCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'increaseBackstabCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:121:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:146: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:154: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:162: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:170: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:191: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:202:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:211:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'hasAppliedBackStab' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'hasAppliedBackStab' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:215:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:216:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:216:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:225:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'computeInitialDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'computeInitialDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:241:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'computeInitialOvertimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'computeInitialOvertimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:252:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getAttackedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getAttackedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:258:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:282:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:306:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:330:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:354:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'getAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'getAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:360:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:383:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:406:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Rogue.java:429:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:19:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:26:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:50: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:89:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:130: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:133: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:168:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:169:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:169:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:173:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'computeInitialDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'computeInitialDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:184:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'computeInitialOvertimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'computeInitialOvertimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:196:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getAttackedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getAttackedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:202:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:220:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:240:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:260:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:280:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'getAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'getAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:286:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:294:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:308:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Wizard.java:322:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:16:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getMaxHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getMaxHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:23:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'computeDamageAgainst' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'computeDamageAgainst' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:44: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:78: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:86:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getDamageWithoutRaceModifier' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getDamageWithoutRaceModifier' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:87:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:87:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:97:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getAbilityOverTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getAbilityOverTime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:98:47: Parameter enemy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:98:68: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:162: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:168:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'computeInitialDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'computeInitialDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:179:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'computeInitialOvertimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'computeInitialOvertimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:180:47: Parameter location should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:190:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getAttackedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getAttackedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:196:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:218:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:240:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:262:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'attack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'attack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:285:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'getAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'getAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:291:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:318:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:345:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/Pyromancer.java:372:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'affectOvertime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'affectOvertime' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:53:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'setHasMadeAKillThisRound' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'setHasMadeAKillThisRound' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:53:42: Parameter hasMadeAKillThisRound should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:91: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:99:33: Parameter move should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:195:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'setAbilityAffectedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'setAbilityAffectedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:195:38: Parameter abilityAffectedBy should be final. [FinalParameters]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:227:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:240:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'doRoundEndingRoutine' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'doRoundEndingRoutine' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:254:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'fightWon' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'fightWon' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:265:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'checkForLevelUp' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'checkForLevelUp' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:281:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'hasDied' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'hasDied' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:289:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/characters/GameCharacter.java:298:5: Class 'GameCharacter' looks like designed for extension (can be subclassed), but the method 'getInitialRoundHealth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameCharacter' final or making the method 'getInitialRoundHealth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /Users/grigorelucian/Documents/League-of-OOP/src/main/data/Constants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
Audit done.
Checkstyle ends with 114 errors.
